// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["zepto", "application/views/screen"], function($, ScreenView) {
  var loadingScreenView;
  return loadingScreenView = (function(_super) {

    __extends(loadingScreenView, _super);

    loadingScreenView.NumberOfDots = 5;

    function loadingScreenView(divID) {
      this.divID = divID;
      this.dotsLoading = __bind(this.dotsLoading, this);

      loadingScreenView.__super__.constructor.call(this, this.divID);
      this.dots = '';
    }

    loadingScreenView.prototype.show = function() {
      loadingScreenView.__super__.show.call(this);
      return this.interval = setInterval(this.dotsLoading, 500);
    };

    loadingScreenView.prototype.hide = function() {
      loadingScreenView.__super__.hide.call(this);
      return clearInterval(this.interval);
    };

    loadingScreenView.prototype.dotsLoading = function() {
      if (this.dots.length < loadingScreenView.NumberOfDots) {
        this.dots += '.';
      } else {
        this.dots = '.';
      }
      return $("" + this.divID + " .loading .dots").html("" + this.dots);
    };

    loadingScreenView.prototype.gpsOK = function() {
      return $("" + this.divID + " .gpsAvailable").show();
    };

    loadingScreenView.prototype.connectionOK = function() {
      return $("" + this.divID + " .connectionEstablished").show();
    };

    return loadingScreenView;

  })(ScreenView);
});
