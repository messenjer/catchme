// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(["zepto"], function($) {
  var Geolocation;
  return Geolocation = (function() {

    function Geolocation() {
      this.onError = __bind(this.onError, this);

      this.onPosition = __bind(this.onPosition, this);

      this.getCurrentPosition = __bind(this.getCurrentPosition, this);
      this.position = null;
      this.setinterval = false;
      this.callback = null;
    }

    Geolocation.prototype.setAvailableCallback = function(callback) {
      this.callback = callback;
    };

    Geolocation.prototype.getPosition = function() {
      return this.position;
    };

    Geolocation.prototype.getCurrentPosition = function() {
      if (navigator.geolocation) {
        return navigator.geolocation.getCurrentPosition(this.onPosition, this.onError);
      } else {
        return alert("No Geolocation");
      }
    };

    Geolocation.prototype.onPosition = function(pos) {
      return this.updatePosition(pos);
    };

    Geolocation.prototype.onError = function(error) {
      console.log(error);
      switch (error.code) {
        case error.PERMISSION_DENIED:
          return alert("You have canceled location request");
        case error.POSITION_UNAVAILABLE:
          return alert("Location information is unavailable");
        case error.TIMEOUT:
          return alert("Location request timed out");
        case error.UNKNOWN_ERROR:
          return alert("Unknown error happened, oops");
      }
    };

    Geolocation.prototype.updatePosition = function(pos) {
      this.position = [pos.coords.latitude, pos.coords.longitude];
      console.log(this.position);
      if (this.setinterval) {
        this.infiniteLoop = setInterval(this.getCurrentPosition, 60000);
      }
      return typeof this.callback === "function" ? this.callback() : void 0;
    };

    Geolocation.prototype.updatePositionStart = function() {
      this.setinterval = true;
      return this.getCurrentPosition();
    };

    Geolocation.prototype.updatePositionStop = function() {
      this.setinterval = false;
      return clearInterval(this.infiniteLoop);
    };

    return Geolocation;

  })();
});
