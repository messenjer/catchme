// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

define(["socket.io"], function(io) {
  var CatchMeServerApi;
  return CatchMeServerApi = (function() {

    function CatchMeServerApi() {
      this.onGameon = __bind(this.onGameon, this);

      this.onDebug = __bind(this.onDebug, this);

      this.onConnect = __bind(this.onConnect, this);

      this.onError = __bind(this.onError, this);

      this.onId = __bind(this.onId, this);
      this.url = "http://10.102.180.34:8080/";
      this.gameData = {};
      this.socket = null;
      this.connectCallback = null;
      this.id = null;
      this.callbackGameOn = null;
    }

    CatchMeServerApi.prototype.setConnectionCallback = function(connectCallback) {
      this.connectCallback = connectCallback;
    };

    CatchMeServerApi.prototype.setGeoloc = function(geoloc) {
      this.geoloc = geoloc;
    };

    CatchMeServerApi.prototype.setCallbackGameOn = function(callbackGameOn) {
      this.callbackGameOn = callbackGameOn;
      return console.log("game on callback");
    };

    CatchMeServerApi.prototype.init = function() {
      this.socket = io.connect(this.url);
      this.socket.on('id', this.onId);
      this.socket.on('error', this.onError);
      this.socket.on('connect', this.onConnect);
      this.socket.on('debug', this.onDebug);
      this.socket.on('gameon', this.onGameon);
      return this.socket.on('news', function(data) {
        console.log(data);
        return this.socket.emit('my other event', {
          my: 'data'
        });
      });
    };

    CatchMeServerApi.prototype.sendPosition = function(position) {
      return this.socket.emit('position', position);
    };

    CatchMeServerApi.prototype.whoAmi = function() {
      return this.socket.emit('whoami');
    };

    CatchMeServerApi.prototype.onId = function(id) {
      this.id = id;
    };

    CatchMeServerApi.prototype.onError = function(error) {
      console.log(error);
      return alert("Connection error");
    };

    CatchMeServerApi.prototype.onConnect = function(message) {
      console.log("Connected");
      console.log(message);
      return typeof this.connectCallback === "function" ? this.connectCallback() : void 0;
    };

    CatchMeServerApi.prototype.onDebug = function(message) {
      console.log("debug message received:");
      return console.log(message);
    };

    CatchMeServerApi.prototype.onGameon = function(gameData) {
      this.gameData = gameData;
      console.log("gameon received");
      console.log(this.gameData);
      return typeof this.callbackGameOn === "function" ? this.callbackGameOn() : void 0;
    };

    CatchMeServerApi.prototype.getOthersPosition = function() {
      var key, value, _ref;
      _ref = this.gameData;
      for (key in _ref) {
        value = _ref[key];
        if (key === this.id) {
          console.log("same id");
        } else {
          return value.position;
        }
      }
    };

    return CatchMeServerApi;

  })();
});
