// Generated by CoffeeScript 1.4.0
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(["zepto", "application/controllers/controller", "application/models/api"], function($, Controller, RtbfApi) {
  var loadingController;
  return loadingController = (function(_super) {

    __extends(loadingController, _super);

    function loadingController(view, settings) {
      this.view = view;
      this.settings = settings;
      this.gpsOK = __bind(this.gpsOK, this);

      this.connectionOK = __bind(this.connectionOK, this);

      loadingController.__super__.constructor.call(this, this.view);
      this.connectionOK = false;
      this.gpsOK = false;
    }

    loadingController.prototype.load = function() {};

    loadingController.prototype.unload = function() {};

    loadingController.prototype.activate = function() {
      loadingController.__super__.activate.call(this);
      return setTimeout(this.event, 5000);
    };

    loadingController.prototype.event = function() {
      return $('body').trigger('AppEvent', ['GAMESETUP']);
    };

    loadingController.prototype.connectionOK = function(connectionOK) {
      this.connectionOK = connectionOK != null ? connectionOK : true;
      console.log("connection established");
      if (this.gpsOk) {
        return this.fireLoadedEvent();
      }
    };

    loadingController.prototype.gpsOK = function(gpsOK) {
      this.gpsOK = gpsOK != null ? gpsOK : true;
      console.log("gps OK");
      if (this.connectionOK) {
        return this.fireLoadedEvent();
      }
    };

    loadingController.prototype.fireLoadedEvent = function() {
      return $('body').trigger('AppEvent', ['GAMESETUP']);
    };

    return loadingController;

  })(Controller);
});
